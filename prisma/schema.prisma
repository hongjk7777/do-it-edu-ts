generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model test {
  id Int @id @default(autoincrement())
}


enum UserRoleEnum {
  ADMIN
  USER
}

model User {
  id        Int           @id @default(autoincrement()) @db.UnsignedInt
  username  String        @db.VarChar(40) @unique
  password  String        @db.VarChar(255)
  role      UserRoleEnum  @default(USER)
  createdAt DateTime      @default(now()) @db.Timestamp(0)
  updatedAt DateTime      @default(now()) @db.Timestamp(0)
  student   Student?
}

model Student {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  userId      Int?     @db.UnsignedInt() @unique
  name        String   @db.VarChar(40)
  phoneNum    String   @unique @db.VarChar(40)
  courseId    Int      @db.UnsignedInt
  school      String?  @db.VarChar(40)
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @db.Timestamp(0)
  user        User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_ibfk_2")
  course      Course   @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_ibfk_1")
  examStudent ExamStudent[]

  @@index([courseId], map: "courseId")
}

model Course {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String    @db.VarChar(40) @unique
  createdAt DateTime   @default(now()) @db.Timestamp(0)
  updatedAt DateTime   @default(now()) @db.Timestamp(0)
  student    Student[]
  exam      Exam[]
}

model Exam {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  round     Int       @db.UnsignedInt
  commonRound Int?    @db.UnsignedInt @default(0)
  courseId  Int       @db.UnsignedInt 
  average   Float     @db.Float @default(0)
  standardDeviation Float @db.Float @default(0)
  scoreRule String?   @db.VarChar(4000)
  topScore  Float     @db.Float @default(0)
  totalTester Int     @db.UnsignedInt @default(0)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exam_ibfk_1")
  examScore ExamScore[]
  examStduent ExamStudent[]

  @@unique([round, courseId])
}

model ExamScore {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  examId    Int       @db.UnsignedInt 
  problemNumber Int   @db.UnsignedInt
  maxScore  Float     @db.Float
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  exam      Exam      @relation(fields: [examId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "exam_score_ibfk_1")

  @@unique([examId, problemNumber])
}

model ExamStudent {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  examId    Int       @db.UnsignedInt
  studentId Int       @db.UnsignedInt
  ranking   Int?      @db.UnsignedInt
  seoulDept String?   @db.VarChar(50)
  yonseiDept String?  @db.VarChar(50)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  student   Student   @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exam_student_ibfk_1")
  exam      Exam      @relation(fields: [examId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exam_student_ibfk_2")
  examStudentScore ExamStudentScore[]

  @@unique([examId, studentId])
}

model ExamStudentScore {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  examStudentId Int   @db.UnsignedInt
  problemNumber Int   @db.UnsignedInt
  problemScore  Float @db.Float
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)
  examStudent  ExamStudent  @relation(fields: [examStudentId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "exam_student_score_ibfk_1")

  @@unique([examStudentId, problemNumber])
}
